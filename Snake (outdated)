from Tkinter import*
import time
from random import randint, shuffle

class Snake:
    def __init__(self, master = None):
        master["bg"] = "black"

        self.frame = Frame(master)
        self.frame["bg"] = "black"
        self.frame.pack()
        
        '''Listas de posicoes possiveis da comida'''
        self.Lx = [2, 21, 40, 59, 78, 97, 116, 135, 154, 173, 192, 211, 230, 249, 268, 287, 306, 325, 344, 363, 382]
        self.Ly = [2, 21, 40, 59, 78, 97, 116, 135, 154, 173, 192, 211, 230, 249, 268, 287]
        
        '''Distancia de movimento'''
        self.dmove = 19
        
        '''Coordenadas do corpo'''
        self.coordx = randint(4, 16)
        self.coordy = randint(4, 10)
        self.xi = self.Lx[self.coordx]
        self.yi = self.Ly[self.coordy]
        self.xf = self.xi + self.dmove
        self.yf = self.yi + self.dmove
        
        '''Extremos do Canvas'''
        self.xmin = 2
        self.ymin = 2
        self.xmax = 400
        self.ymax = 305

##        self.xmin = 2
##        self.ymin = 2
##        self.xmax = 382
##        self.ymax = 287
        
        '''Velocidade do movimento'''
        self.v = 0.1
        
        '''Direcao de movimento'''
        self.direct = 0 #0 - nula, 1 - direita, 2 - esquerda, 3 - para baixo, 4 - para cima
        
        '''Variavel apontando se a cobra comeu a comida'''
        self.fdif = 0
        
        '''Cria o Canvas e cofingura-o'''
        self.canvas = Canvas(self.frame)
##        self.canvas["width"] = 400
##        self.canvas["height"] = 305

        self.canvas["width"] = 419
        self.canvas["height"] = 324
        
##        self.canvas["bg"] = "black"
        self.canvas.pack(side = TOP)

        '''Lista com o corpo da cobra'''
        self.SnakeB = []

        '''Cria o corpo da cobra'''
        self.Sbody1 = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")

        '''Adiciona os quadrados(partes do corpo) a lista(corpo)'''
        self.SnakeB.append(self.Sbody1)

        '''Associa os movimentos da cobra as teclas'''
        self.canvas.bind("<Right>", self.directR)
        self.canvas.bind("<Left>", self.directL)
        self.canvas.bind("<Down>", self.directD)
        self.canvas.bind("<Up>", self.directU)
        self.canvas.focus_set()

        '''Chama o metodo de criacao da comida'''
        self.food()

        '''Define os multiplicadores de coordenadas'''
        self.mtpY = (len(self.SnakeB)-1) #para usar quando a cobra for comer a comida na vertical

    def directR(self, event):
        '''Impede que a cobra mude apenas sentido do movimento'''
        if self.direct != 2:
            '''Move a cobra para direita'''        
            self.direct = 1 #muda a variavel da direcao para direita
            self.moveSnake() #chama o metodo de movimento da cobra

    def directL(self, event):
        '''Impede que a cobra mude apenas sentido do movimento'''
        if self.direct != 1:
            '''Move a cobra para esquerda'''
            self.direct = 2 #muda a variavel da direcao para esquerda
            self.moveSnake() #chama o metodo de movimento da cobra
        
    def directD(self, event):
        '''Impede que a cobra mude apenas sentido do movimento'''
        if self.direct != 4:
            '''Move a cobra para baixo'''        
            self.direct = 3 #muda a variavel da direcao para baixo
            self.moveSnake() #chama o metodo de movimento da cobra
        
    
    def directU(self, event):
        '''Impede que a cobra mude apenas sentido do movimento'''
        if self.direct != 3:
            '''Move a cobra para cima'''        
            self.direct = 4 #muda a variavel da direcao para cima
            self.moveSnake() #chama o metodo de movimento da cobra
        
    '''Metodo de movimento da cobra'''
    def moveSnake(self):
        while True:
            if self.direct == 1:
                '''Move para direita'''
                if self.xi < self.xmax:       
                    '''Apaga o quadrado final da cobra do canvas e remove da lista (corpo)'''
                    self.canvas.delete(self.SnakeB[0])
                    self.SnakeB.remove(self.SnakeB[0])

                    '''Muda as variaveis das coordenadas no eixo X'''
                    self.xi += self.dmove
                    self.xf += self.dmove

                    '''Cria um novo quadrado no canvas no sentido do movimento e adiciona-o a lista(corpo)'''
                    self.Sbody = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")
                    self.SnakeB.append(self.Sbody)

                else:
                    self.xi = -17
                    self.xf = self.xi+self.dmove
                    
            if self.direct == 2:       
                '''Move para esquerda'''        
                if self.xi > self.xmin:
                    '''Apaga o quadrado final da cobra do canvas e remove da lista (corpo)'''
                    self.canvas.delete(self.SnakeB[0])
                    self.SnakeB.remove(self.SnakeB[0])
                    
                    '''Muda as variaveis das coordenadas no eixo X'''
                    self.xi -= self.dmove
                    self.xf -= self.dmove

                    '''Cria um novo quadrado no canvas no sentido do movimento e adiciona-o a lista(corpo)'''
                    self.Sbody = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")
                    self.SnakeB.append(self.Sbody)

                else:
                    self.xi = 420
                    self.xf = self.xi+self.dmove
                    
            if self.direct == 3:
                '''Move para baixo'''
                if self.yi < self.ymax:
                    '''Apaga o quadrado final da cobra do canvas e remove da lista (corpo)'''
                    self.canvas.delete(self.SnakeB[0])
                    self.SnakeB.remove(self.SnakeB[0])

                    '''Muda as variaveis das coordenadas no eixo Y'''
                    self.yi += self.dmove
                    self.yf += self.dmove

                    '''Cria um novo quadrado no canvas no sentido do movimento e adiciona-o a lista(corpo)'''
                    self.Sbody = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")
                    self.SnakeB.append(self.Sbody)

                else:
                    self.yi = -17
                    self.yf = self.yi+self.dmove
                    
            if self.direct == 4:
                '''Move para cima'''
                if self.yi > self.ymin:
                    '''Apaga o quadrado final da cobra do canvas e remove da lista (corpo)'''
                    self.canvas.delete(self.SnakeB[0])
                    self.SnakeB.remove(self.SnakeB[0])

                    '''Muda as variaveis das coordenadas no eixo Y'''
                    self.yi -= self.dmove
                    self.yf -= self.dmove

                    '''Cria um novo quadrado no canvas no sentido do movimento e adiciona-o a lista(corpo)'''
                    self.Sbody = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")
                    self.SnakeB.append(self.Sbody)

                else:
                    self.yi = 325
                    self.yf = self.yi+self.dmove
                    
            if self.canvas.coords(self.SnakeB[-1]) == self.canvas.coords(self.food):
                    self.canvas.delete(self.food)
                    self.snakeGrow()
                    self.reFood()
                    
            self.canvas.update() #atualiza o canvas para o movimento continuar
            time.sleep(self.v) #cria um delay para ajustar a velocidade da cobra
    
    '''Mostra a mensagem "GAME OVER"'''
    def hitWall(self):
        self.lbl = Label(self.frame, text = "GAME OVER", font = ("Calibri", 50, "italic", "bold"), fg = "white")
        self.lbl.pack()

    def hitSnake(self):
        self.canvas.delete(ALL)
        self.lbl = Label(self.frame, text = "GAME OVER", font = ("Calibri", 50, "italic", "bold"), fg = "white")
        self.lbl.pack()
    
    def food(self):
        '''Cria uma lista para coordenadas que a comida nao pode ter'''
        self.NotCoords = []
        self.food = 0

        '''Adiciona as coordenadas a lista'''
        for i in range(0, len(self.SnakeB)-1):
            self.NotCoords.append(self.canvas.coords(self.SnakeB[i]))

        while self.food == 0:
            '''Embaralha a lista com as possiveis coordenadas da comida'''
            shuffle(self.Lx)
            shuffle(self.Ly)

            '''Atribui as coordenadas a comida'''
            self.x1 = self.Lx[0]
            self.y1 = self.Ly[0]
            if (self.x1, self.y1, self.x1+self.dmove, self.y1+self.dmove) not in self.NotCoords:
                '''Cria a comida'''                
                self.food = self.canvas.create_oval(self.x1, self.y1, self.x1+self.dmove, self.y1+self.dmove, fill = "yellow")

    def reFood(self):
        '''Cria uma lista para coordenadas que a comida nao pode ter'''
        self.NotCoords = []
        self.food = 0

        '''Adiciona as coordenadas a lista'''
        for i in range(0, len(self.SnakeB)-1):
            self.NotCoords.append(self.canvas.coords(self.SnakeB[i]))

        while self.food == 0:
            '''Embaralha a lista com as possiveis coordenadas da comida'''
            shuffle(self.Lx)
            shuffle(self.Ly)

            '''Atribui as coordenadas a comida'''
            self.x1 = self.Lx[0]
            self.y1 = self.Ly[0]
            if (float(self.x1), float(self.y1), float(self.x1+self.dmove), float(self.y1+self.dmove)) not in self.NotCoords:
                '''Cria a comida'''                
                self.food = self.canvas.create_oval(self.x1, self.y1, self.x1+self.dmove, self.y1+self.dmove, fill = "yellow")

    '''Aumenta a cobra'''
    def snakeGrow(self):
        if self.direct == 1:
            self.Sbodyplus = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")
            self.SnakeB.insert(0, self.Sbodyplus)

        elif self.direct == 2:
            self.Sbodyplus = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")
            self.SnakeB.insert(0, self.Sbodyplus)

        elif self.direct == 3:
            self.Sbodyplus = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")
            self.SnakeB.insert(0, self.Sbodyplus)

        elif self.direct == 4:
            self.Sbodyplus = self.canvas.create_rectangle(self.xi, self.yi, self.xf, self.yf, fill = "darkgreen")
            self.SnakeB.insert(0, self.Sbodyplus)

    def slowSpeed(self):
        self.v = 0.3

    def mediumSpeed(self):
        self.v = 0.2

    def highSpeed(self):
        self.v = 0.1

root = Tk()

'''Define o menu principal'''
mainmenu = Menu(root)

'''Define os menus secundarios'''
submenu1 = Menu(mainmenu)
mainmenu.add_cascade(label = "Options", menu = submenu1)
submenu2 = Menu(mainmenu)
mainmenu.add_cascade(label = "Speed", menu = submenu2)

'''Adiciona comandos aos menus secundarios'''
submenu1.add_command(label = 'Restart', command = Snake)
submenu1.add_command(label = 'Stop')
submenu2.add_command(label = 'Slow', command = Snake.slowSpeed)
submenu2.add_command(label = 'Medium', command = Snake.mediumSpeed)
submenu2.add_command(label = 'High', command = Snake.highSpeed)

Snake(root)
root.config(menu = mainmenu)
root.mainloop()
